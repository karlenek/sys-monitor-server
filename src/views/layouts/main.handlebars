<!DOCTYPE html>
<html>
<meta name="viewport" content="width=device-width, initial-scale=1">
<head>
    <meta charset="utf-8">
    <title>{{ title }}</title>
</head>
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<style>

  body {
    width: 100%;
    height: 100vh;
    margin: 0;
    font-family: 'Roboto', sans-serif;
  }
</style>
<script>
  function Socket() {
    this.ws = null;
    this.listeners = {};
    this.isConnected = false;
  }

  Socket.CONNECT = 'connect';
  Socket.CLOSE = 'close';

  Socket.AUTH = 'auth';
  Socket.AUTH_REQUIRED = 'auth_required';
  Socket.AUTH_SUCCESS = 'auth_success';
  Socket.AUTH_FAILED = 'auth_failed';

  Socket.SUBSCRIBE = 'subscribe';
  Socket.CHANGE = 'change';

  Socket.prototype.on = function on(event, fn) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }

    this.listeners[event].push(fn);
  }

  Socket.prototype.off = function off(event, fn) {
    if (!this.listeners[event]) {
      return;
    }

    this.listeners[event] = this.listeners[event].filter((l) => l !== fn);
  }

  Socket.prototype.dispatchEvent = function dispatchEvent(event, payload) {
    if (this.listeners[event]) {
      this.listeners[event].forEach(fn => fn(payload));
    }
  }

  Socket.prototype.disconnect = function disconnect() {
    this.shouldReconnect = false;
  }

  Socket.prototype.connect = function connect(host) {
    var self = this;

    self.ws = new WebSocket(host);

    self.shouldReconnect = true;

    self.ws.onopen = function() {
      self.isConnected = true;
      self.dispatchEvent(Socket.CONNECT);
    };

    self.ws.onmessage = function(e) {
      try {
        var data = JSON.parse(e.data);

        if (data.type === Socket.CHANGE) {
          self.dispatchEvent(Socket.CHANGE, data);
        }

        if (data.type === Socket.AUTH_REQUIRED) {
          self.send(Socket.AUTH, {
            // accessToken: '1234',
            appId: '{{applicationId}}',
          });
        }

        if (data.type === Socket.AUTH_FAILED) {
          self.dispatchEvent(Socket.AUTH_FAILED, data);
          self.shouldReconnect = false;
        }

        if (data.type === Socket.AUTH_SUCCESS) {
          self.dispatchEvent(Socket.AUTH_SUCCESS, data);
        }

      } catch (err) {
        console.error(err);
        console.error('Failed to parse data from server');
      }
    };

    self.ws.onclose = function(e) {
      self.isConnected = false;
      self.ws = null;

      self.dispatchEvent(Socket.DISCONNECT);

      if (!self.shouldReconnect) {
        return;
      }

      console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);
      setTimeout(function() {
        self.connect(host);
      }, 1000);
    };

    self.ws.onerror = function(err) {
      console.error('Socket encountered error: ', err.message, 'Closing socket');
      self.ws.close();
    };
  }

  Socket.prototype.send = function send(event, message) {
    if (!this.ws || !this.isConnected) {
      throw new Error('Cannot send data while disconnected!');
    }

    this.ws.send(JSON.stringify(Object.assign({}, message, {
      type: event,
    })));
  }

  window.Socket = Socket;

  var socket = new Socket();

  window.socket = socket;

  var proto = (window.location.protocol.includes('https') && 'wss') || 'ws';
  var socketUrl = proto + '://' + window.location.host;

  socket.connect(socketUrl);
</script>

{{{body}}}

</html>